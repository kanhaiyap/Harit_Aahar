{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL;const axiosInstance=axios.create({baseURL:API_BASE_URL,// ✅ Use dynamic API URL\nwithCredentials:true,// ✅ Ensure cookies & sessions are sent\nheaders:{\"Content-Type\":\"application/json\"}});axiosInstance.interceptors.request.use(async config=>{const csrfToken=await getCSRFToken();if(csrfToken){config.headers[\"X-CSRFToken\"]=csrfToken;}return config;},error=>Promise.reject(error));console.log(\"✅ API BASE URL:\",API_BASE_URL);export const getCSRFToken=async()=>{try{const response=await fetch(`${API_BASE_URL}/api/auth/csrf1/`,{method:\"GET\",credentials:\"include\"// ✅ Ensure cookies are sent\n});if(!response.ok)throw new Error(`CSRF fetch error: ${response.status}`);const data=await response.json();console.log(\"✅ CSRF Token Retrieved:\",data.csrfToken);// ✅ Debugging log\nreturn data.csrfToken;}catch(error){console.error(\"❌ Error fetching CSRF Token:\",error);return null;}};// ✅ Function to send OTP\nexport const sendOTP=async phoneNumber=>{try{const csrfToken=await getCSRFToken();// Fetch CSRF Token before sending request\nconst response=await axiosInstance.post(\"/api/auth/send-otp/\",{phone_number:phoneNumber},{headers:{'X-CSRFToken':csrfToken,// Send CSRF Token in header\n'Content-Type':'application/json'},withCredentials:true// Allow cookies for CSRF\n});return response.data;}catch(error){console.error('Error sending OTP:',error.response||error);throw error;}};export const verifyOTP=async(phoneNumber,otp)=>{const csrfToken=await getCSRFToken();// ✅ Ensure CSRF token is set\nif(!csrfToken){alert(\"⚠️ CSRF Token missing! Try again.\");return;}try{const response=await axiosInstance.post(\"/api/auth/verify-otp/\",{phone_number:phoneNumber,otp:otp},// ✅ Send phone_number in request\n{headers:{\"X-CSRFToken\":csrfToken},withCredentials:true// ✅ Ensure cookies are sent\n});console.log(\"✅ OTP Verified Successfully:\",response.data);return response.data;}catch(error){var _error$response;console.error(\"🔥 OTP Verification Failed:\",((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error);alert(\"❌ OTP Verification Failed. Check console for details.\");throw error;}};// Signup Function\nexport const signupUser=async userInfo=>{try{const csrfToken=await getCSRFToken();if(!csrfToken){throw new Error('CSRF Token missing. Try reloading the page.');}console.log('Sending signup request with:',userInfo);// Log data before request\nconst response=await axiosInstance.post(`/api/auth/signup/`,userInfo,{headers:{'X-CSRFToken':csrfToken},withCredentials:true});console.log('Signup API response:',response.data);return response.data;}catch(error){var _error$response2;console.error('Error during signup:',((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error);throw error;}};export const getAuthToken=()=>localStorage.getItem(\"authToken\");export const isStaffUser=async()=>{try{const response=await axiosInstance.get(\"/api/auth/profile/\",{headers:{Authorization:`Token ${getAuthToken()}`}});return response.data.is_staff;// Ensure backend sends is_staff\n}catch(error){return false;}};export default axiosInstance;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","csrfToken","getCSRFToken","error","Promise","reject","console","log","response","fetch","method","credentials","ok","Error","status","data","json","sendOTP","phoneNumber","post","phone_number","verifyOTP","otp","alert","_error$response","signupUser","userInfo","_error$response2","getAuthToken","localStorage","getItem","isStaffUser","get","Authorization","is_staff"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/Harit_Aahar/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\n\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,  // ✅ Use dynamic API URL\n  withCredentials: true,  // ✅ Ensure cookies & sessions are sent\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\naxiosInstance.interceptors.request.use(\n  async (config) => {\n    const csrfToken = await getCSRFToken();\n    if (csrfToken) {\n      config.headers[\"X-CSRFToken\"] = csrfToken;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\nconsole.log(\"✅ API BASE URL:\", API_BASE_URL);\nexport const getCSRFToken = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/csrf1/`, {\n      method: \"GET\",\n      credentials: \"include\",  // ✅ Ensure cookies are sent\n    });\n\n    if (!response.ok) throw new Error(`CSRF fetch error: ${response.status}`);\n\n    const data = await response.json();\n    console.log(\"✅ CSRF Token Retrieved:\", data.csrfToken);  // ✅ Debugging log\n\n    return data.csrfToken;\n  } catch (error) {\n    console.error(\"❌ Error fetching CSRF Token:\", error);\n    return null;\n  }\n};\n\n\n\n\n\n\n\n// ✅ Function to send OTP\nexport const sendOTP = async (phoneNumber) => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axiosInstance.post(\"/api/auth/send-otp/\",\n      { phone_number: phoneNumber },\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,  // Send CSRF Token in header\n          'Content-Type': 'application/json',\n        },\n        withCredentials: true,  // Allow cookies for CSRF\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\n\n\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken();  // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n\n  try {\n    const response = await axiosInstance.post(\"/api/auth/verify-otp/\",\n      { phone_number: phoneNumber, otp: otp }, // ✅ Send phone_number in request\n      {\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        withCredentials: true, // ✅ Ensure cookies are sent\n      }\n    );\n\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"🔥 OTP Verification Failed:\", error.response?.data || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async (userInfo) => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n\n    console.log('Sending signup request with:', userInfo);  // Log data before request\n\n    const response = await axiosInstance.post(\n      `/api/auth/signup/`,\n      userInfo,\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,\n        },\n        withCredentials: true,\n      }\n    );\n\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during signup:', error.response?.data || error);\n    throw error;\n  }\n};\n\n\n\n\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\n\nexport const isStaffUser = async () => {\n  try {\n    const response = await axiosInstance.get(\"/api/auth/profile/\", {\n      headers: { Authorization: `Token ${getAuthToken()}` },\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};\n\nexport default axiosInstance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}