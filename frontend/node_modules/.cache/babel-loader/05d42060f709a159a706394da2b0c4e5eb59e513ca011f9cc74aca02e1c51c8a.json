{"ast":null,"code":"import axios from\"axios\";const API_BASE_URL=process.env.REACT_APP_API_URL||\"http://localhost:8000\";// ✅ Export the function so it can be used elsewhere\nexport function getCsrfFromCookies(){const cookies=document.cookie.split(\"; \");for(const cookie of cookies){if(cookie.startsWith(\"csrftoken=\")){return cookie.split(\"=\")[1];}}return\"\";}// ✅ Create Axios instance with proper settings\nconst axiosInstance=axios.create({baseURL:API_BASE_URL,// ✅ Ensure it's using `localhost`\nwithCredentials:true,// ✅ Ensures cookies are included\nheaders:{\"Content-Type\":\"application/json\"}});// ✅ Dynamically set CSRF token before each request\naxiosInstance.interceptors.request.use(config=>{const csrfToken=getCsrfFromCookies();if(csrfToken){config.headers[\"X-CSRFToken\"]=csrfToken;}return config;},error=>Promise.reject(error));export default axiosInstance;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","getCsrfFromCookies","cookies","document","cookie","split","startsWith","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","csrfToken","error","Promise","reject"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/Harit_Aahar/frontend/src/auth/CSRFToken.js"],"sourcesContent":["import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:8000\";\n\n// ✅ Export the function so it can be used elsewhere\nexport function getCsrfFromCookies() {\n  const cookies = document.cookie.split(\"; \");\n  for (const cookie of cookies) {\n    if (cookie.startsWith(\"csrftoken=\")) {\n      return cookie.split(\"=\")[1];\n    }\n  }\n  return \"\";\n}\n\n// ✅ Create Axios instance with proper settings\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,  // ✅ Ensure it's using `localhost`\n  withCredentials: true,  // ✅ Ensures cookies are included\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// ✅ Dynamically set CSRF token before each request\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const csrfToken = getCsrfFromCookies();\n    if (csrfToken) {\n      config.headers[\"X-CSRFToken\"] = csrfToken;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,KAAM,CAAAC,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,uBAAuB,CAE7E;AACA,MAAO,SAAS,CAAAC,kBAAkBA,CAAA,CAAG,CACnC,KAAM,CAAAC,OAAO,CAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CAC3C,IAAK,KAAM,CAAAD,MAAM,GAAI,CAAAF,OAAO,CAAE,CAC5B,GAAIE,MAAM,CAACE,UAAU,CAAC,YAAY,CAAC,CAAE,CACnC,MAAO,CAAAF,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC7B,CACF,CACA,MAAO,EAAE,CACX,CAEA;AACA,KAAM,CAAAE,aAAa,CAAGX,KAAK,CAACY,MAAM,CAAC,CACjCC,OAAO,CAAEZ,YAAY,CAAG;AACxBa,eAAe,CAAE,IAAI,CAAG;AACxBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,EAAK,CACV,KAAM,CAAAC,SAAS,CAAGf,kBAAkB,CAAC,CAAC,CACtC,GAAIe,SAAS,CAAE,CACbD,MAAM,CAACJ,OAAO,CAAC,aAAa,CAAC,CAAGK,SAAS,CAC3C,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAE,KAAK,EAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC,CAED,cAAe,CAAAV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}