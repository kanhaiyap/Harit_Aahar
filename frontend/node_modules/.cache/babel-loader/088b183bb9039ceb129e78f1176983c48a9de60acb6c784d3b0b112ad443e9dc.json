{"ast":null,"code":"import axios from 'axios';\nexport const getCSRFToken = async () => {\n  try {\n    const response = await fetch(\"http://127.0.0.1:8000/api/csrf/\", {\n      method: \"GET\",\n      credentials: \"include\" // ✅ Ensure cookies are sent\n    });\n    if (!response.ok) throw new Error(`CSRF fetch error: ${response.status}`);\n    const data = await response.json();\n    console.log(\"✅ CSRF Token Retrieved:\", data.csrfToken); // ✅ Debugging log\n\n    return data.csrfToken;\n  } catch (error) {\n    console.error(\"❌ Error fetching CSRF Token:\", error);\n    return null;\n  }\n};\n\n// ✅ Function to send OTP\nexport const sendOTP = async phoneNumber => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post('/api/auth/send-otp/', {\n      phone_number: phoneNumber\n    }, {\n      headers: {\n        'X-CSRFToken': csrfToken,\n        // Send CSRF Token in header\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true // Allow cookies for CSRF\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken(); // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n  try {\n    const response = await axios.post(\"http://127.0.0.1:8000/api/auth/verify-otp/\", {\n      phone_number: phoneNumber,\n      otp: otp\n    },\n    // ✅ Send phone_number in request\n    {\n      headers: {\n        \"X-CSRFToken\": csrfToken\n      },\n      withCredentials: true // ✅ Ensure cookies are sent\n    });\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"🔥 OTP Verification Failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async userInfo => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n    console.log('Sending signup request with:', userInfo); // Log data before request\n\n    const response = await axios.post('/api/auth/signup/', userInfo, {\n      headers: {\n        'X-CSRFToken': csrfToken\n      },\n      withCredentials: true\n    });\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error during signup:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n    throw error;\n  }\n};\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\nexport const isStaffUser = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/auth/profile/\", {\n      headers: {\n        Authorization: `Token ${getAuthToken()}`\n      }\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};","map":{"version":3,"names":["axios","getCSRFToken","response","fetch","method","credentials","ok","Error","status","data","json","console","log","csrfToken","error","sendOTP","phoneNumber","post","phone_number","headers","withCredentials","verifyOTP","otp","alert","_error$response","signupUser","userInfo","_error$response2","getAuthToken","localStorage","getItem","isStaffUser","get","Authorization","is_staff"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\n\nexport const getCSRFToken = async () => {\n  try {\n    const response = await fetch(\"http://127.0.0.1:8000/api/csrf/\", {\n      method: \"GET\",\n      credentials: \"include\",  // ✅ Ensure cookies are sent\n    });\n\n    if (!response.ok) throw new Error(`CSRF fetch error: ${response.status}`);\n\n    const data = await response.json();\n    console.log(\"✅ CSRF Token Retrieved:\", data.csrfToken);  // ✅ Debugging log\n\n    return data.csrfToken;\n  } catch (error) {\n    console.error(\"❌ Error fetching CSRF Token:\", error);\n    return null;\n  }\n};\n\n\n\n\n\n\n\n// ✅ Function to send OTP\nexport const sendOTP = async (phoneNumber) => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post(\n      '/api/auth/send-otp/',\n      { phone_number: phoneNumber },\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,  // Send CSRF Token in header\n          'Content-Type': 'application/json',\n        },\n        withCredentials: true,  // Allow cookies for CSRF\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\n\n\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken();  // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n\n  try {\n    const response = await axios.post(\n      \"http://127.0.0.1:8000/api/auth/verify-otp/\",\n      { phone_number: phoneNumber, otp: otp }, // ✅ Send phone_number in request\n      {\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        withCredentials: true, // ✅ Ensure cookies are sent\n      }\n    );\n\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"🔥 OTP Verification Failed:\", error.response?.data || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async (userInfo) => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n\n    console.log('Sending signup request with:', userInfo);  // Log data before request\n\n    const response = await axios.post(\n      '/api/auth/signup/',\n      userInfo,\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,\n        },\n        withCredentials: true,\n      }\n    );\n\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during signup:', error.response?.data || error);\n    throw error;\n  }\n};\n\n\n\n\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\n\nexport const isStaffUser = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/auth/profile/\", {\n      headers: { Authorization: `Token ${getAuthToken()}` },\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}