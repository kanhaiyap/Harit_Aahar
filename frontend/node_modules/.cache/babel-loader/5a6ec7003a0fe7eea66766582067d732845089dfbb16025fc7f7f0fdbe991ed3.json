{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  // ✅ Use dynamic API URL\n  withCredentials: true,\n  // ✅ Ensure cookies & sessions are sent\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(async config => {\n  const csrfToken = await getCSRFToken();\n  if (csrfToken) {\n    config.headers[\"X-CSRFToken\"] = csrfToken;\n  }\n  return config;\n}, error => Promise.reject(error));\nconsole.log(\"✅ API BASE URL:\", API_BASE_URL);\nexport const getCSRFToken = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/csrf1/`, {\n      method: \"GET\",\n      credentials: \"include\" // ✅ Ensure cookies are sent\n    });\n    if (!response.ok) throw new Error(`CSRF fetch error: ${response.status}`);\n    const data = await response.json();\n    console.log(\"✅ CSRF Token Retrieved:\", data.csrfToken); // ✅ Debugging log\n\n    return data.csrfToken;\n  } catch (error) {\n    console.error(\"❌ Error fetching CSRF Token:\", error);\n    return null;\n  }\n};\n\n// ✅ Function to send OTP\nexport const sendOTP = async phoneNumber => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axiosInstance.post(\"/api/auth/send-otp/\", {\n      phone_number: phoneNumber\n    }, {\n      headers: {\n        'X-CSRFToken': csrfToken,\n        // Send CSRF Token in header\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true // Allow cookies for CSRF\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken(); // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n  try {\n    const response = await axiosInstance.post(\"/api/auth/verify-otp/\", {\n      phone_number: phoneNumber,\n      otp: otp\n    },\n    // ✅ Send phone_number in request\n    {\n      headers: {\n        \"X-CSRFToken\": csrfToken\n      },\n      withCredentials: true // ✅ Ensure cookies are sent\n    });\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"🔥 OTP Verification Failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async userInfo => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n    console.log('Sending signup request with:', userInfo); // Log data before request\n\n    const response = await axiosInstance.post(`/api/auth/signup/`, userInfo, {\n      headers: {\n        'X-CSRFToken': csrfToken\n      },\n      withCredentials: true\n    });\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error during signup:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n    throw error;\n  }\n};\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\nexport const isStaffUser = async () => {\n  try {\n    const response = await axiosInstance.get(\"/api/auth/profile/\", {\n      headers: {\n        Authorization: `Token ${getAuthToken()}`\n      }\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};\nexport default axiosInstance;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","csrfToken","getCSRFToken","error","Promise","reject","console","log","response","fetch","method","credentials","ok","Error","status","data","json","sendOTP","phoneNumber","post","phone_number","verifyOTP","otp","alert","_error$response","signupUser","userInfo","_error$response2","getAuthToken","localStorage","getItem","isStaffUser","get","Authorization","is_staff"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/Harit_Aahar/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\n\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,  // ✅ Use dynamic API URL\n  withCredentials: true,  // ✅ Ensure cookies & sessions are sent\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\naxiosInstance.interceptors.request.use(\n  async (config) => {\n    const csrfToken = await getCSRFToken();\n    if (csrfToken) {\n      config.headers[\"X-CSRFToken\"] = csrfToken;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\nconsole.log(\"✅ API BASE URL:\", API_BASE_URL);\nexport const getCSRFToken = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/csrf1/`, {\n      method: \"GET\",\n      credentials: \"include\",  // ✅ Ensure cookies are sent\n    });\n\n    if (!response.ok) throw new Error(`CSRF fetch error: ${response.status}`);\n\n    const data = await response.json();\n    console.log(\"✅ CSRF Token Retrieved:\", data.csrfToken);  // ✅ Debugging log\n\n    return data.csrfToken;\n  } catch (error) {\n    console.error(\"❌ Error fetching CSRF Token:\", error);\n    return null;\n  }\n};\n\n\n\n\n\n\n\n// ✅ Function to send OTP\nexport const sendOTP = async (phoneNumber) => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axiosInstance.post(\"/api/auth/send-otp/\",\n      { phone_number: phoneNumber },\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,  // Send CSRF Token in header\n          'Content-Type': 'application/json',\n        },\n        withCredentials: true,  // Allow cookies for CSRF\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\n\n\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken();  // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n\n  try {\n    const response = await axiosInstance.post(\"/api/auth/verify-otp/\",\n      { phone_number: phoneNumber, otp: otp }, // ✅ Send phone_number in request\n      {\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        withCredentials: true, // ✅ Ensure cookies are sent\n      }\n    );\n\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"🔥 OTP Verification Failed:\", error.response?.data || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async (userInfo) => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n\n    console.log('Sending signup request with:', userInfo);  // Log data before request\n\n    const response = await axiosInstance.post(\n      `/api/auth/signup/`,\n      userInfo,\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,\n        },\n        withCredentials: true,\n      }\n    );\n\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during signup:', error.response?.data || error);\n    throw error;\n  }\n};\n\n\n\n\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\n\nexport const isStaffUser = async () => {\n  try {\n    const response = await axiosInstance.get(\"/api/auth/profile/\", {\n      headers: { Authorization: `Token ${getAuthToken()}` },\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};\n\nexport default axiosInstance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}