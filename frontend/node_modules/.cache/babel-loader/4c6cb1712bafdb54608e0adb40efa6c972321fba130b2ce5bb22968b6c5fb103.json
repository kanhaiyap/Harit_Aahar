{"ast":null,"code":"import axios from 'axios';\n// export const getCSRFToken = async () => {\n//   try {\n//     const response = await axios.get(\"http://127.0.0.1:8000/api/auth/csrf/\", {\n//       withCredentials: true, // ✅ Ensure cookies are sent\n//     });\n//     console.log(\"✅ CSRF Token Fetched:\", response.data.csrfToken);\n//     return response.data.csrfToken;\n//   } catch (error) {\n//     console.error(\"🔥 Error fetching CSRF token:\", error);\n//     return null;\n//   }\n// };\n\nexport const getCSRFToken = async () => {\n  var _document$cookie$spli;\n  const storedCsrfToken = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('csrftoken='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n  if (storedCsrfToken) {\n    console.log('✅ Using stored CSRF Token:', storedCsrfToken);\n    return storedCsrfToken;\n  }\n  try {\n    const response = await axios.get('http://127.0.0.1:8000/api/auth/csrf/', {\n      withCredentials: true\n    });\n    console.log('✅ CSRF Token Fetched:', response.data.csrfToken);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error('🔥 Error fetching CSRF token:', error);\n    return null;\n  }\n};\n\n// ✅ Function to send OTP\nexport const sendOTP = async phoneNumber => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post('/api/auth/send-otp/', {\n      phone_number: phoneNumber\n    }, {\n      headers: {\n        'X-CSRFToken': csrfToken,\n        // Send CSRF Token in header\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true // Allow cookies for CSRF\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken(); // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n  try {\n    const response = await axios.post(\"http://127.0.0.1:8000/api/auth/verify-otp/\", {\n      phone_number: phoneNumber,\n      otp: otp\n    },\n    // ✅ Send phone_number in request\n    {\n      headers: {\n        \"X-CSRFToken\": csrfToken\n      },\n      withCredentials: true // ✅ Ensure cookies are sent\n    });\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"🔥 OTP Verification Failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async userInfo => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n    console.log('Sending signup request with:', userInfo); // Log data before request\n\n    const response = await axios.post('/api/auth/signup/', userInfo, {\n      headers: {\n        'X-CSRFToken': csrfToken\n      },\n      withCredentials: true\n    });\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error during signup:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n    throw error;\n  }\n};\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\nexport const isStaffUser = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/auth/profile/\", {\n      headers: {\n        Authorization: `Token ${getAuthToken()}`\n      }\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};","map":{"version":3,"names":["axios","getCSRFToken","_document$cookie$spli","storedCsrfToken","document","cookie","split","find","row","startsWith","console","log","response","get","withCredentials","data","csrfToken","error","sendOTP","phoneNumber","post","phone_number","headers","verifyOTP","otp","alert","_error$response","signupUser","userInfo","Error","_error$response2","getAuthToken","localStorage","getItem","isStaffUser","Authorization","is_staff"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\n// export const getCSRFToken = async () => {\n//   try {\n//     const response = await axios.get(\"http://127.0.0.1:8000/api/auth/csrf/\", {\n//       withCredentials: true, // ✅ Ensure cookies are sent\n//     });\n//     console.log(\"✅ CSRF Token Fetched:\", response.data.csrfToken);\n//     return response.data.csrfToken;\n//   } catch (error) {\n//     console.error(\"🔥 Error fetching CSRF token:\", error);\n//     return null;\n//   }\n// };\n\n\nexport const getCSRFToken = async () => {\n  const storedCsrfToken = document.cookie\n    .split('; ')\n    .find(row => row.startsWith('csrftoken='))\n    ?.split('=')[1];\n\n  if (storedCsrfToken) {\n    console.log('✅ Using stored CSRF Token:', storedCsrfToken);\n    return storedCsrfToken;\n  }\n\n  try {\n    const response = await axios.get('http://127.0.0.1:8000/api/auth/csrf/', {\n      withCredentials: true,\n    });\n\n    console.log('✅ CSRF Token Fetched:', response.data.csrfToken);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error('🔥 Error fetching CSRF token:', error);\n    return null;\n  }\n};\n\n\n// ✅ Function to send OTP\nexport const sendOTP = async (phoneNumber) => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post(\n      '/api/auth/send-otp/',\n      { phone_number: phoneNumber },\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,  // Send CSRF Token in header\n          'Content-Type': 'application/json',\n        },\n        withCredentials: true,  // Allow cookies for CSRF\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\n\n\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken();  // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n\n  try {\n    const response = await axios.post(\n      \"http://127.0.0.1:8000/api/auth/verify-otp/\",\n      { phone_number: phoneNumber, otp: otp }, // ✅ Send phone_number in request\n      {\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        withCredentials: true, // ✅ Ensure cookies are sent\n      }\n    );\n\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"🔥 OTP Verification Failed:\", error.response?.data || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async (userInfo) => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n\n    console.log('Sending signup request with:', userInfo);  // Log data before request\n\n    const response = await axios.post(\n      '/api/auth/signup/',\n      userInfo,\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,\n        },\n        withCredentials: true,\n      }\n    );\n\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during signup:', error.response?.data || error);\n    throw error;\n  }\n};\n\n\n\n\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\n\nexport const isStaffUser = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/auth/profile/\", {\n      headers: { Authorization: `Token ${getAuthToken()}` },\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}