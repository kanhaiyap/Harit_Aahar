{"ast":null,"code":"var _jsxFileName = \"/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\n// import { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { getCSRFToken } from \"../auth/AuthUtils\"; // ✅ Ensure this is imported\n\n// const Login = () => {\n//   const [userInfo, setUserInfo] = useState({ email: \"\", password: \"\" });\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setUserInfo({ ...userInfo, [name]: value });\n//   };\n\n//   const handleLogin = async () => {\n//     console.log(\"🚀 Attempting login...\");\n//     console.log(\"📌 Sending Login Data:\", userInfo); // ✅ Debugging\n\n//     if (!userInfo.email || !userInfo.password) {\n//       alert(\"❌ Please enter both email/phone and password.\");\n//       return;\n//     }\n\n//     try {\n//       const csrfToken = await getCSRFToken(); // ✅ Fetch CSRF token first\n//       console.log(\"✅ CSRF Token:\", csrfToken);\n\n//       if (!csrfToken) {\n//         alert(\"❌ CSRF Token missing. Refresh the page and try again.\");\n//         return;\n//       }\n\n//       const response = await axios.post(\n//         \"http://127.0.0.1:8000/api/auth/login/\",\n//         {\n//           username: userInfo.email, // ✅ Backend expects \"username\"\n//           password: userInfo.password,\n//         },\n//         {\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             \"X-CSRFToken\": csrfToken, // ✅ Send CSRF token\n//           },\n//           withCredentials: true, // ✅ Allows session cookies\n//         }\n//       );\n\n//       console.log(\"🎉 Login Success:\", response.data);\n//       if (response.data.success) {\n//         const userData = {\n//           name: response.data.user.name,\n//           email: response.data.user.email,\n//           phone_number: response.data.user.phone_number,\n//         };\n//         localStorage.setItem(\"authToken\", response.data.authToken);\n//         alert(\"✅ Login successful!\");\n//         localStorage.setItem(\"user\", JSON.stringify(userData)); // ✅ Store full user data\n//       window.dispatchEvent(new Event(\"storage\")); // ✅ Notify Layout.js of login\n\n//         navigate(\"/profile\"); // Redirect to profile page\n//       } else {\n//         alert(\"❌ Login failed: \" + response.data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"🔥 Login Error:\", error.response?.data || error);\n//       alert(\"❌ Login failed. Check console for details.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <input type=\"text\" name=\"email\" placeholder=\"Email or Phone\" value={userInfo.email} onChange={handleChange} />\n//       <input type=\"password\" name=\"password\" placeholder=\"Password\" value={userInfo.password} onChange={handleChange} />\n//       <button onClick={handleLogin}>Login</button>\n//       <button onClick={() => navigate('/signup')}>Signup</button>\n//       <button onClick={() => navigate('/forgot-password')}>Forgot Password?</button>\n\n//     </div>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { getCSRFToken, sendOTP, verifyOTP } from '../auth/AuthUtils';\n\n// Set axios to send cookies with every request globally\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.withCredentials = true;\nconst Login = () => {\n  _s();\n  const [userInfo, setUserInfo] = useState({\n    phone: '',\n    password: ''\n  });\n  const [otp, setOTP] = useState('');\n  // stage: 'credentials' means we haven't sent the OTP yet; 'otp' means OTP is sent and awaiting verification\n  const [stage, setStage] = useState('credentials');\n  const [csrfToken, setCsrfToken] = useState(null);\n  const navigate = useNavigate();\n\n  // Fetch CSRF token once on mount and store it\n  useEffect(() => {\n    const fetchCsrf = async () => {\n      const token = await getCSRFToken();\n      setCsrfToken(token);\n      console.log(\"Prefetched CSRF Token:\", token);\n    };\n    fetchCsrf();\n  }, []);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserInfo(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Step 1: Check credentials and, if valid, send OTP.\n  const handleSendOTP = async () => {\n    if (!userInfo.phone || !userInfo.password) {\n      alert(\"Please enter both phone number and password.\");\n      return;\n    }\n    if (!csrfToken) {\n      alert(\"CSRF Token not available. Please refresh the page.\");\n      return;\n    }\n    try {\n      // Check credentials using the regular login endpoint.\n      const credResponse = await axios.post(\"http://127.0.0.1:8000/api/auth/login/\", {\n        username: userInfo.phone,\n        password: userInfo.password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        }\n      });\n      if (!credResponse.data.success) {\n        alert(\"Incorrect phone number or password. Please enter the correct password.\");\n        return;\n      }\n      // Credentials are valid; now send the OTP.\n      const otpResponse = await sendOTP(userInfo.phone);\n      if (otpResponse.success) {\n        alert(\"✅ OTP sent successfully!\");\n        setStage('otp'); // Switch to OTP stage\n      } else {\n        alert(\"❌ Failed to send OTP: \" + otpResponse.message);\n      }\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error during credential check or sending OTP:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      alert(\"Error during credential check or sending OTP. Check console for details.\");\n    }\n  };\n\n  // Step 2: Verify the OTP and complete login.\n  const handleOTPLogin = async () => {\n    if (!otp) {\n      alert(\"Please enter the OTP.\");\n      return;\n    }\n    if (!csrfToken) {\n      alert(\"CSRF Token not available. Please refresh the page.\");\n      return;\n    }\n    try {\n      // Verify the OTP.\n      const verifyResponse = await verifyOTP(userInfo.phone, otp);\n      if (!verifyResponse.success) {\n        alert(\"Invalid OTP. Please try again.\");\n        return;\n      }\n      // OTP verified; now complete login via the OTP-based endpoint.\n      const loginResponse = await axios.post(\"http://127.0.0.1:8000/api/auth/login-otp/\", {\n        phone: userInfo.phone,\n        password: userInfo.password,\n        otp: otp\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        }\n      });\n      if (loginResponse.data.success) {\n        const userData = {\n          name: loginResponse.data.user.name,\n          phone: loginResponse.data.user.phone_number\n        };\n        localStorage.setItem(\"authToken\", loginResponse.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + loginResponse.data.message);\n      }\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error during OTP login:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n      alert(\"Error during OTP login. Check console for details.\");\n    }\n  };\n\n  // Single button handler:\n  // In 'credentials' stage, check credentials & send OTP.\n  // In 'otp' stage, verify OTP and complete login.\n  const handleButtonClick = async () => {\n    if (stage === 'credentials') {\n      await handleSendOTP();\n    } else if (stage === 'otp') {\n      await handleOTPLogin();\n    }\n  };\n  const buttonText = stage === 'credentials' ? \"Send OTP\" : \"Login\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"tel\",\n      name: \"phone\",\n      placeholder: \"Enter your phone number\",\n      value: userInfo.phone,\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"Enter your password\",\n      value: userInfo.password,\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), stage === 'otp' && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter OTP\",\n      value: otp,\n      onChange: e => setOTP(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/signup'),\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/forgot-password'),\n      children: \"Forgot Password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"+iUQYfESKOc3wUvPna7o8tG6tVI=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","getCSRFToken","sendOTP","verifyOTP","jsxDEV","_jsxDEV","defaults","withCredentials","Login","_s","userInfo","setUserInfo","phone","password","otp","setOTP","stage","setStage","csrfToken","setCsrfToken","navigate","fetchCsrf","token","console","log","handleChange","e","name","value","target","prev","handleSendOTP","alert","credResponse","post","username","headers","data","success","otpResponse","message","error","_error$response","response","handleOTPLogin","verifyResponse","loginResponse","userData","user","phone_number","localStorage","setItem","authToken","JSON","stringify","window","dispatchEvent","Event","_error$response2","handleButtonClick","buttonText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","required","onClick","_c","$RefreshReg$"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js"],"sourcesContent":["// import axios from \"axios\";\n// import { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { getCSRFToken } from \"../auth/AuthUtils\"; // ✅ Ensure this is imported\n\n// const Login = () => {\n//   const [userInfo, setUserInfo] = useState({ email: \"\", password: \"\" });\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setUserInfo({ ...userInfo, [name]: value });\n//   };\n\n//   const handleLogin = async () => {\n//     console.log(\"🚀 Attempting login...\");\n//     console.log(\"📌 Sending Login Data:\", userInfo); // ✅ Debugging\n\n//     if (!userInfo.email || !userInfo.password) {\n//       alert(\"❌ Please enter both email/phone and password.\");\n//       return;\n//     }\n\n//     try {\n//       const csrfToken = await getCSRFToken(); // ✅ Fetch CSRF token first\n//       console.log(\"✅ CSRF Token:\", csrfToken);\n\n//       if (!csrfToken) {\n//         alert(\"❌ CSRF Token missing. Refresh the page and try again.\");\n//         return;\n//       }\n\n//       const response = await axios.post(\n//         \"http://127.0.0.1:8000/api/auth/login/\",\n//         {\n//           username: userInfo.email, // ✅ Backend expects \"username\"\n//           password: userInfo.password,\n//         },\n//         {\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             \"X-CSRFToken\": csrfToken, // ✅ Send CSRF token\n//           },\n//           withCredentials: true, // ✅ Allows session cookies\n//         }\n//       );\n\n//       console.log(\"🎉 Login Success:\", response.data);\n//       if (response.data.success) {\n//         const userData = {\n//           name: response.data.user.name,\n//           email: response.data.user.email,\n//           phone_number: response.data.user.phone_number,\n//         };\n//         localStorage.setItem(\"authToken\", response.data.authToken);\n//         alert(\"✅ Login successful!\");\n//         localStorage.setItem(\"user\", JSON.stringify(userData)); // ✅ Store full user data\n//       window.dispatchEvent(new Event(\"storage\")); // ✅ Notify Layout.js of login\n\n\n//         navigate(\"/profile\"); // Redirect to profile page\n//       } else {\n//         alert(\"❌ Login failed: \" + response.data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"🔥 Login Error:\", error.response?.data || error);\n//       alert(\"❌ Login failed. Check console for details.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <input type=\"text\" name=\"email\" placeholder=\"Email or Phone\" value={userInfo.email} onChange={handleChange} />\n//       <input type=\"password\" name=\"password\" placeholder=\"Password\" value={userInfo.password} onChange={handleChange} />\n//       <button onClick={handleLogin}>Login</button>\n//       <button onClick={() => navigate('/signup')}>Signup</button>\n//       <button onClick={() => navigate('/forgot-password')}>Forgot Password?</button>\n    \n//     </div>\n//   );\n// };\n\n// export default Login;\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { getCSRFToken, sendOTP, verifyOTP } from '../auth/AuthUtils';\n\n// Set axios to send cookies with every request globally\naxios.defaults.withCredentials = true;\n\nconst Login = () => {\n  const [userInfo, setUserInfo] = useState({ phone: '', password: '' });\n  const [otp, setOTP] = useState('');\n  // stage: 'credentials' means we haven't sent the OTP yet; 'otp' means OTP is sent and awaiting verification\n  const [stage, setStage] = useState('credentials');\n  const [csrfToken, setCsrfToken] = useState(null);\n  const navigate = useNavigate();\n\n  // Fetch CSRF token once on mount and store it\n  useEffect(() => {\n    const fetchCsrf = async () => {\n      const token = await getCSRFToken();\n      setCsrfToken(token);\n      console.log(\"Prefetched CSRF Token:\", token);\n    };\n    fetchCsrf();\n  }, []);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUserInfo(prev => ({ ...prev, [name]: value }));\n  };\n\n  // Step 1: Check credentials and, if valid, send OTP.\n  const handleSendOTP = async () => {\n    if (!userInfo.phone || !userInfo.password) {\n      alert(\"Please enter both phone number and password.\");\n      return;\n    }\n    if (!csrfToken) {\n      alert(\"CSRF Token not available. Please refresh the page.\");\n      return;\n    }\n    try {\n      // Check credentials using the regular login endpoint.\n      const credResponse = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login/\",\n        {\n          username: userInfo.phone,\n          password: userInfo.password,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n        }\n      );\n      if (!credResponse.data.success) {\n        alert(\"Incorrect phone number or password. Please enter the correct password.\");\n        return;\n      }\n      // Credentials are valid; now send the OTP.\n      const otpResponse = await sendOTP(userInfo.phone);\n      if (otpResponse.success) {\n        alert(\"✅ OTP sent successfully!\");\n        setStage('otp'); // Switch to OTP stage\n      } else {\n        alert(\"❌ Failed to send OTP: \" + otpResponse.message);\n      }\n    } catch (error) {\n      console.error(\"Error during credential check or sending OTP:\", error.response?.data || error);\n      alert(\"Error during credential check or sending OTP. Check console for details.\");\n    }\n  };\n\n  // Step 2: Verify the OTP and complete login.\n  const handleOTPLogin = async () => {\n    if (!otp) {\n      alert(\"Please enter the OTP.\");\n      return;\n    }\n    if (!csrfToken) {\n      alert(\"CSRF Token not available. Please refresh the page.\");\n      return;\n    }\n    try {\n      // Verify the OTP.\n      const verifyResponse = await verifyOTP(userInfo.phone, otp);\n      if (!verifyResponse.success) {\n        alert(\"Invalid OTP. Please try again.\");\n        return;\n      }\n      // OTP verified; now complete login via the OTP-based endpoint.\n      const loginResponse = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login-otp/\",\n        {\n          phone: userInfo.phone,\n          password: userInfo.password,\n          otp: otp,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n        }\n      );\n      if (loginResponse.data.success) {\n        const userData = {\n          name: loginResponse.data.user.name,\n          phone: loginResponse.data.user.phone_number,\n        };\n        localStorage.setItem(\"authToken\", loginResponse.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + loginResponse.data.message);\n      }\n    } catch (error) {\n      console.error(\"Error during OTP login:\", error.response?.data || error);\n      alert(\"Error during OTP login. Check console for details.\");\n    }\n  };\n\n  // Single button handler:\n  // In 'credentials' stage, check credentials & send OTP.\n  // In 'otp' stage, verify OTP and complete login.\n  const handleButtonClick = async () => {\n    if (stage === 'credentials') {\n      await handleSendOTP();\n    } else if (stage === 'otp') {\n      await handleOTPLogin();\n    }\n  };\n\n  const buttonText = stage === 'credentials' ? \"Send OTP\" : \"Login\";\n\n  return (\n    <div className=\"form-container\">\n      <h2>Login</h2>\n      <input \n        type=\"tel\" \n        name=\"phone\" \n        placeholder=\"Enter your phone number\" \n        value={userInfo.phone} \n        onChange={handleChange} \n        required \n      />\n      <input \n        type=\"password\" \n        name=\"password\" \n        placeholder=\"Enter your password\" \n        value={userInfo.password} \n        onChange={handleChange} \n        required \n      />\n      {stage === 'otp' && (\n        <input \n          type=\"text\" \n          placeholder=\"Enter OTP\" \n          value={otp} \n          onChange={(e) => setOTP(e.target.value)} \n          required \n        />\n      )}\n      <button onClick={handleButtonClick}>{buttonText}</button>\n      <button onClick={() => navigate('/signup')}>Signup</button>\n      <button onClick={() => navigate('/forgot-password')}>Forgot Password?</button>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}