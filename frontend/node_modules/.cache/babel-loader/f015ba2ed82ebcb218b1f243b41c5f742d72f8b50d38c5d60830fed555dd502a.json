{"ast":null,"code":"var _jsxFileName = \"/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getCSRFToken, sendOTP, verifyOTP } from \"../auth/AuthUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  // Using \"phone\" since this is a phone-based login system.\n  const [userInfo, setUserInfo] = useState({\n    phone: \"\",\n    password: \"\"\n  });\n  const [otp, setOTP] = useState(\"\");\n  // otpStage: \"none\" = no OTP sent, \"sent\" = OTP sent but not verified, \"verified\" = OTP verified\n  const [otpStage, setOtpStage] = useState(\"none\");\n  const navigate = useNavigate();\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserInfo(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Step 1: Check credentials using the login endpoint.\n  // Only if credentials are valid, proceed to send OTP.\n  const handleCheckCredentials = async () => {\n    if (!userInfo.phone || !userInfo.password) {\n      alert(\"Please enter both phone number and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      if (!csrfToken) {\n        alert(\"CSRF Token missing. Refresh the page and try again.\");\n        return;\n      }\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/login/\", {\n        username: userInfo.phone,\n        // Backend expects \"username\" (in this case, the phone number)\n        password: userInfo.password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (response.data.success) {\n        // Credentials are valid. Now send the OTP.\n        await handleSendOTP();\n      } else {\n        alert(\"Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      var _error$response;\n      console.error(\"Credentials check error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      alert(\"Error checking credentials.\");\n    }\n  };\n\n  // Step 2: Send OTP to the phone number.\n  const handleSendOTP = async () => {\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/send-otp/\", {\n        phone_number: userInfo.phone\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (response.data.success) {\n        alert(\"✅ OTP sent successfully!\");\n        setOtpStage(\"sent\");\n      } else {\n        alert(\"❌ Failed to send OTP: \" + response.data.message);\n      }\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error sending OTP:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n      alert(\"Error sending OTP.\");\n    }\n  };\n\n  // Step 3: Verify the OTP entered by the user.\n  const handleVerifyOTP = async () => {\n    if (!otp) {\n      alert(\"Please enter the OTP.\");\n      return;\n    }\n    try {\n      const response = await verifyOTP(userInfo.phone, otp);\n      if (response.success) {\n        alert(\"✅ OTP verified successfully!\");\n        setOtpStage(\"verified\");\n      } else {\n        alert(\"❌ Invalid OTP.\");\n      }\n    } catch (error) {\n      var _error$response3;\n      console.error(\"Error verifying OTP:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n      alert(\"Error verifying OTP.\");\n    }\n  };\n\n  // Step 4: Finalize login using an OTP-based endpoint.\n  const handleOTPLogin = async () => {\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/login-otp/\", {\n        phone: userInfo.phone,\n        password: userInfo.password,\n        otp: otp\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (response.data.success) {\n        const userData = {\n          name: response.data.user.name,\n          phone: response.data.user.phone_number\n        };\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      var _error$response4;\n      console.error(\"OTP Login error:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error);\n      alert(\"Login failed. Check console for details.\");\n    }\n  };\n\n  // The button handler drives the flow:\n  // - \"none\": Check credentials and send OTP.\n  // - \"sent\": Verify OTP.\n  // - \"verified\": Finalize login.\n  const handleButtonClick = async () => {\n    if (otpStage === \"none\") {\n      await handleCheckCredentials();\n    } else if (otpStage === \"sent\") {\n      await handleVerifyOTP();\n    } else if (otpStage === \"verified\") {\n      await handleOTPLogin();\n    }\n  };\n\n  // Button text changes based on the current OTP stage.\n  let buttonText = \"\";\n  if (otpStage === \"none\") {\n    buttonText = \"Send OTP\";\n  } else if (otpStage === \"sent\") {\n    buttonText = \"Verify OTP\";\n  } else if (otpStage === \"verified\") {\n    buttonText = \"Login\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"phone\",\n      placeholder: \"Enter your phone number\",\n      value: userInfo.phone,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"Enter your password\",\n      value: userInfo.password,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), otpStage !== \"none\" && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter OTP\",\n      value: otp,\n      onChange: e => setOTP(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/signup\"),\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/forgot-password\"),\n      children: \"Forgot Password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"zPvCScqCreSAZhtI0Uj+MYIwarI=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","useState","useNavigate","getCSRFToken","sendOTP","verifyOTP","jsxDEV","_jsxDEV","Login","_s","userInfo","setUserInfo","phone","password","otp","setOTP","otpStage","setOtpStage","navigate","handleChange","e","name","value","target","prev","handleCheckCredentials","alert","csrfToken","response","post","username","headers","withCredentials","data","success","handleSendOTP","message","error","_error$response","console","phone_number","_error$response2","handleVerifyOTP","_error$response3","handleOTPLogin","userData","user","localStorage","setItem","authToken","JSON","stringify","window","dispatchEvent","Event","_error$response4","handleButtonClick","buttonText","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getCSRFToken, sendOTP, verifyOTP } from \"../auth/AuthUtils\";\n\nconst Login = () => {\n  // Using \"phone\" since this is a phone-based login system.\n  const [userInfo, setUserInfo] = useState({ phone: \"\", password: \"\" });\n  const [otp, setOTP] = useState(\"\");\n  // otpStage: \"none\" = no OTP sent, \"sent\" = OTP sent but not verified, \"verified\" = OTP verified\n  const [otpStage, setOtpStage] = useState(\"none\");\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUserInfo((prev) => ({ ...prev, [name]: value }));\n  };\n\n  // Step 1: Check credentials using the login endpoint.\n  // Only if credentials are valid, proceed to send OTP.\n  const handleCheckCredentials = async () => {\n    if (!userInfo.phone || !userInfo.password) {\n      alert(\"Please enter both phone number and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      if (!csrfToken) {\n        alert(\"CSRF Token missing. Refresh the page and try again.\");\n        return;\n      }\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login/\",\n        {\n          username: userInfo.phone, // Backend expects \"username\" (in this case, the phone number)\n          password: userInfo.password,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (response.data.success) {\n        // Credentials are valid. Now send the OTP.\n        await handleSendOTP();\n      } else {\n        alert(\"Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      console.error(\"Credentials check error:\", error.response?.data || error);\n      alert(\"Error checking credentials.\");\n    }\n  };\n\n  // Step 2: Send OTP to the phone number.\n  const handleSendOTP = async () => {\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/send-otp/\",\n        { phone_number: userInfo.phone },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (response.data.success) {\n        alert(\"✅ OTP sent successfully!\");\n        setOtpStage(\"sent\");\n      } else {\n        alert(\"❌ Failed to send OTP: \" + response.data.message);\n      }\n    } catch (error) {\n      console.error(\"Error sending OTP:\", error.response?.data || error);\n      alert(\"Error sending OTP.\");\n    }\n  };\n\n  // Step 3: Verify the OTP entered by the user.\n  const handleVerifyOTP = async () => {\n    if (!otp) {\n      alert(\"Please enter the OTP.\");\n      return;\n    }\n    try {\n      const response = await verifyOTP(userInfo.phone, otp);\n      if (response.success) {\n        alert(\"✅ OTP verified successfully!\");\n        setOtpStage(\"verified\");\n      } else {\n        alert(\"❌ Invalid OTP.\");\n      }\n    } catch (error) {\n      console.error(\"Error verifying OTP:\", error.response?.data || error);\n      alert(\"Error verifying OTP.\");\n    }\n  };\n\n  // Step 4: Finalize login using an OTP-based endpoint.\n  const handleOTPLogin = async () => {\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login-otp/\",\n        {\n          phone: userInfo.phone,\n          password: userInfo.password,\n          otp: otp,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (response.data.success) {\n        const userData = {\n          name: response.data.user.name,\n          phone: response.data.user.phone_number,\n        };\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      console.error(\"OTP Login error:\", error.response?.data || error);\n      alert(\"Login failed. Check console for details.\");\n    }\n  };\n\n  // The button handler drives the flow:\n  // - \"none\": Check credentials and send OTP.\n  // - \"sent\": Verify OTP.\n  // - \"verified\": Finalize login.\n  const handleButtonClick = async () => {\n    if (otpStage === \"none\") {\n      await handleCheckCredentials();\n    } else if (otpStage === \"sent\") {\n      await handleVerifyOTP();\n    } else if (otpStage === \"verified\") {\n      await handleOTPLogin();\n    }\n  };\n\n  // Button text changes based on the current OTP stage.\n  let buttonText = \"\";\n  if (otpStage === \"none\") {\n    buttonText = \"Send OTP\";\n  } else if (otpStage === \"sent\") {\n    buttonText = \"Verify OTP\";\n  } else if (otpStage === \"verified\") {\n    buttonText = \"Login\";\n  }\n\n  return (\n    <div>\n      <h2>Login</h2>\n      <input\n        type=\"text\"\n        name=\"phone\"\n        placeholder=\"Enter your phone number\"\n        value={userInfo.phone}\n        onChange={handleChange}\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Enter your password\"\n        value={userInfo.password}\n        onChange={handleChange}\n      />\n      {otpStage !== \"none\" && (\n        <input\n          type=\"text\"\n          placeholder=\"Enter OTP\"\n          value={otp}\n          onChange={(e) => setOTP(e.target.value)}\n        />\n      )}\n      <button onClick={handleButtonClick}>{buttonText}</button>\n      <button onClick={() => navigate(\"/signup\")}>Signup</button>\n      <button onClick={() => navigate(\"/forgot-password\")}>Forgot Password?</button>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}