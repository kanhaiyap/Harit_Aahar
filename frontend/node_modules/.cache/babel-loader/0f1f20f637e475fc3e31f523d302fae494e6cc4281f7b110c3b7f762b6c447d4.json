{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000',\n  // Or your production URL\n  withCredentials: true // Important: Include for CSRF\n});\n// ✅ Function to fetch CSRF token\nexport const getCSRFToken = async () => {\n  try {\n    const response = await axios.get('/api/auth/csrf/', {\n      withCredentials: true\n    });\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error('Error fetching CSRF token:', error);\n    return null;\n  }\n};\n\n// ✅ Function to send OTP\nexport const sendOTP = async phoneNumber => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post('/api/auth/send-otp/', {\n      phone_number: phoneNumber\n    }, {\n      headers: {\n        'X-CSRFToken': csrfToken,\n        // Send CSRF Token in header\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true // Allow cookies for CSRF\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\n\n// Function to verify OTP\nexport const verifyOTP = async (phoneNumber, otp) => {\n  try {\n    const response = await axios.post('/api/auth/verify-otp/', {\n      phone_number: phoneNumber,\n      otp\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","getCSRFToken","response","get","data","csrfToken","error","console","sendOTP","phoneNumber","post","phone_number","headers","verifyOTP","otp"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\nconst api = axios.create({\n    baseURL: 'http://127.0.0.1:8000', // Or your production URL\n    withCredentials: true, // Important: Include for CSRF\n  });\n// ✅ Function to fetch CSRF token\nexport const getCSRFToken = async () => {\n  try {\n    const response = await axios.get('/api/auth/csrf/', { withCredentials: true });\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error('Error fetching CSRF token:', error);\n    return null;\n  }\n};\n\n// ✅ Function to send OTP\nexport const sendOTP = async (phoneNumber) => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post(\n      '/api/auth/send-otp/',\n      { phone_number: phoneNumber },\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,  // Send CSRF Token in header\n          'Content-Type': 'application/json',\n        },\n        withCredentials: true,  // Allow cookies for CSRF\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\n\n\n\n// Function to verify OTP\nexport const verifyOTP = async (phoneNumber, otp) => {\n  try {\n    const response = await axios.post('/api/auth/verify-otp/', { phone_number: phoneNumber, otp });\n    return response.data;\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;AACJ;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,iBAAiB,EAAE;MAAEH,eAAe,EAAE;IAAK,CAAC,CAAC;IAC9E,OAAOE,QAAQ,CAACE,IAAI,CAACC,SAAS;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG,MAAOC,WAAW,IAAK;EAC5C,IAAI;IACF,MAAMJ,SAAS,GAAG,MAAMJ,YAAY,CAAC,CAAC,CAAC,CAAC;;IAExC,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACc,IAAI,CAC/B,qBAAqB,EACrB;MAAEC,YAAY,EAAEF;IAAY,CAAC,EAC7B;MACEG,OAAO,EAAE;QACP,aAAa,EAAEP,SAAS;QAAG;QAC3B,cAAc,EAAE;MAClB,CAAC;MACDL,eAAe,EAAE,IAAI,CAAG;IAC1B,CACF,CAAC;IAED,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACJ,QAAQ,IAAII,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACb;AACF,CAAC;;AAID;AACA,OAAO,MAAMO,SAAS,GAAG,MAAAA,CAAOJ,WAAW,EAAEK,GAAG,KAAK;EACnD,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMN,KAAK,CAACc,IAAI,CAAC,uBAAuB,EAAE;MAAEC,YAAY,EAAEF,WAAW;MAAEK;IAAI,CAAC,CAAC;IAC9F,OAAOZ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}