{"ast":null,"code":"var _jsxFileName = \"/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\n// import { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { getCSRFToken } from \"../auth/AuthUtils\"; // ✅ Ensure this is imported\n\n// const Login = () => {\n//   const [userInfo, setUserInfo] = useState({ email: \"\", password: \"\" });\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setUserInfo({ ...userInfo, [name]: value });\n//   };\n\n//   const handleLogin = async () => {\n//     console.log(\"🚀 Attempting login...\");\n//     console.log(\"📌 Sending Login Data:\", userInfo); // ✅ Debugging\n\n//     if (!userInfo.email || !userInfo.password) {\n//       alert(\"❌ Please enter both email/phone and password.\");\n//       return;\n//     }\n\n//     try {\n//       const csrfToken = await getCSRFToken(); // ✅ Fetch CSRF token first\n//       console.log(\"✅ CSRF Token:\", csrfToken);\n\n//       if (!csrfToken) {\n//         alert(\"❌ CSRF Token missing. Refresh the page and try again.\");\n//         return;\n//       }\n\n//       const response = await axios.post(\n//         \"http://127.0.0.1:8000/api/auth/login/\",\n//         {\n//           username: userInfo.email, // ✅ Backend expects \"username\"\n//           password: userInfo.password,\n//         },\n//         {\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             \"X-CSRFToken\": csrfToken, // ✅ Send CSRF token\n//           },\n//           withCredentials: true, // ✅ Allows session cookies\n//         }\n//       );\n\n//       console.log(\"🎉 Login Success:\", response.data);\n//       if (response.data.success) {\n//         const userData = {\n//           name: response.data.user.name,\n//           email: response.data.user.email,\n//           phone_number: response.data.user.phone_number,\n//         };\n//         localStorage.setItem(\"authToken\", response.data.authToken);\n//         alert(\"✅ Login successful!\");\n//         localStorage.setItem(\"user\", JSON.stringify(userData)); // ✅ Store full user data\n//       window.dispatchEvent(new Event(\"storage\")); // ✅ Notify Layout.js of login\n\n//         navigate(\"/profile\"); // Redirect to profile page\n//       } else {\n//         alert(\"❌ Login failed: \" + response.data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"🔥 Login Error:\", error.response?.data || error);\n//       alert(\"❌ Login failed. Check console for details.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <input type=\"text\" name=\"email\" placeholder=\"Email or Phone\" value={userInfo.email} onChange={handleChange} />\n//       <input type=\"password\" name=\"password\" placeholder=\"Password\" value={userInfo.password} onChange={handleChange} />\n//       <button onClick={handleLogin}>Login</button>\n//       <button onClick={() => navigate('/signup')}>Signup</button>\n//       <button onClick={() => navigate('/forgot-password')}>Forgot Password?</button>\n\n//     </div>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { getCSRFToken, sendOTP, verifyOTP } from '../auth/AuthUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  // Using phone-based login.\n  const [userInfo, setUserInfo] = useState({\n    phone: '',\n    password: ''\n  });\n  const [otp, setOTP] = useState('');\n  // Stage can be 'credentials' (initial) or 'otp' (OTP sent & awaiting verification)\n  const [stage, setStage] = useState('credentials');\n  const [errorMessage, setErrorMessage] = useState(null);\n  const navigate = useNavigate();\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserInfo(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Step 1: Check credentials and, if valid, send the OTP automatically.\n  const handleSendOTP = async () => {\n    if (!userInfo.phone || !userInfo.password) {\n      alert(\"Please enter both phone number and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      if (!csrfToken) {\n        alert(\"CSRF Token missing. Refresh the page and try again.\");\n        return;\n      }\n      // First, verify credentials using the regular login endpoint.\n      const credResponse = await axios.post(\"http://127.0.0.1:8000/api/auth/login/\", {\n        username: userInfo.phone,\n        // using phone as username\n        password: userInfo.password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (!credResponse.data.success) {\n        alert(\"Incorrect phone number or password. Please try again.\");\n        return;\n      }\n      // Credentials are valid; now automatically send OTP.\n      const otpResponse = await sendOTP(userInfo.phone);\n      if (otpResponse.success) {\n        alert(\"✅ OTP sent successfully!\");\n        setStage('otp');\n      } else {\n        alert(\"❌ Failed to send OTP: \" + otpResponse.message);\n      }\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error during credentials check or sending OTP:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      alert(\"Error during credentials check or sending OTP.\");\n    }\n  };\n\n  // Step 2: Verify the OTP and complete login.\n  const handleOTPLogin = async () => {\n    if (!otp) {\n      alert(\"Please enter the OTP.\");\n      return;\n    }\n    try {\n      // Verify the OTP.\n      const verifyResponse = await verifyOTP(userInfo.phone, otp);\n      if (!verifyResponse.success) {\n        alert(\"Invalid OTP. Please try again.\");\n        return;\n      }\n      // OTP verified; complete login via the OTP-based endpoint.\n      const csrfToken = await getCSRFToken();\n      if (!csrfToken) {\n        alert(\"CSRF Token missing. Refresh the page and try again.\");\n        return;\n      }\n      const loginResponse = await axios.post(\"http://127.0.0.1:8000/api/auth/login-otp/\", {\n        phone: userInfo.phone,\n        password: userInfo.password,\n        otp: otp\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (loginResponse.data.success) {\n        const userData = {\n          name: loginResponse.data.user.name,\n          phone: loginResponse.data.user.phone_number\n        };\n        localStorage.setItem(\"authToken\", loginResponse.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + loginResponse.data.message);\n      }\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error during OTP login:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n      alert(\"Error during OTP login.\");\n    }\n  };\n\n  // Single button handler: in 'credentials' stage, check credentials and send OTP;\n  // in 'otp' stage, verify OTP and complete login.\n  const handleButtonClick = async () => {\n    if (stage === 'credentials') {\n      await handleSendOTP();\n    } else if (stage === 'otp') {\n      await handleOTPLogin();\n    }\n  };\n  const buttonText = stage === 'credentials' ? \"Send OTP\" : \"Login\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"\\u274C \", errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"tel\",\n      name: \"phone\",\n      placeholder: \"Enter your phone number\",\n      value: userInfo.phone,\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"Enter your password\",\n      value: userInfo.password,\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), stage === 'otp' && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter OTP\",\n      value: otp,\n      onChange: e => setOTP(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/signup'),\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/forgot-password'),\n      children: \"Forgot Password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"nLZGnLkgreioTlB6trTvm9NWQME=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","axios","useNavigate","getCSRFToken","sendOTP","verifyOTP","jsxDEV","_jsxDEV","Login","_s","userInfo","setUserInfo","phone","password","otp","setOTP","stage","setStage","errorMessage","setErrorMessage","navigate","handleChange","e","name","value","target","prev","handleSendOTP","alert","csrfToken","credResponse","post","username","headers","withCredentials","data","success","otpResponse","message","error","_error$response","console","response","handleOTPLogin","verifyResponse","loginResponse","userData","user","phone_number","localStorage","setItem","authToken","JSON","stringify","window","dispatchEvent","Event","_error$response2","handleButtonClick","buttonText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","required","onClick","_c","$RefreshReg$"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js"],"sourcesContent":["// import axios from \"axios\";\n// import { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { getCSRFToken } from \"../auth/AuthUtils\"; // ✅ Ensure this is imported\n\n// const Login = () => {\n//   const [userInfo, setUserInfo] = useState({ email: \"\", password: \"\" });\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setUserInfo({ ...userInfo, [name]: value });\n//   };\n\n//   const handleLogin = async () => {\n//     console.log(\"🚀 Attempting login...\");\n//     console.log(\"📌 Sending Login Data:\", userInfo); // ✅ Debugging\n\n//     if (!userInfo.email || !userInfo.password) {\n//       alert(\"❌ Please enter both email/phone and password.\");\n//       return;\n//     }\n\n//     try {\n//       const csrfToken = await getCSRFToken(); // ✅ Fetch CSRF token first\n//       console.log(\"✅ CSRF Token:\", csrfToken);\n\n//       if (!csrfToken) {\n//         alert(\"❌ CSRF Token missing. Refresh the page and try again.\");\n//         return;\n//       }\n\n//       const response = await axios.post(\n//         \"http://127.0.0.1:8000/api/auth/login/\",\n//         {\n//           username: userInfo.email, // ✅ Backend expects \"username\"\n//           password: userInfo.password,\n//         },\n//         {\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             \"X-CSRFToken\": csrfToken, // ✅ Send CSRF token\n//           },\n//           withCredentials: true, // ✅ Allows session cookies\n//         }\n//       );\n\n//       console.log(\"🎉 Login Success:\", response.data);\n//       if (response.data.success) {\n//         const userData = {\n//           name: response.data.user.name,\n//           email: response.data.user.email,\n//           phone_number: response.data.user.phone_number,\n//         };\n//         localStorage.setItem(\"authToken\", response.data.authToken);\n//         alert(\"✅ Login successful!\");\n//         localStorage.setItem(\"user\", JSON.stringify(userData)); // ✅ Store full user data\n//       window.dispatchEvent(new Event(\"storage\")); // ✅ Notify Layout.js of login\n\n\n//         navigate(\"/profile\"); // Redirect to profile page\n//       } else {\n//         alert(\"❌ Login failed: \" + response.data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"🔥 Login Error:\", error.response?.data || error);\n//       alert(\"❌ Login failed. Check console for details.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <input type=\"text\" name=\"email\" placeholder=\"Email or Phone\" value={userInfo.email} onChange={handleChange} />\n//       <input type=\"password\" name=\"password\" placeholder=\"Password\" value={userInfo.password} onChange={handleChange} />\n//       <button onClick={handleLogin}>Login</button>\n//       <button onClick={() => navigate('/signup')}>Signup</button>\n//       <button onClick={() => navigate('/forgot-password')}>Forgot Password?</button>\n    \n//     </div>\n//   );\n// };\n\n// export default Login;\n\n\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { getCSRFToken, sendOTP, verifyOTP } from '../auth/AuthUtils';\n\nconst Login = () => {\n  // Using phone-based login.\n  const [userInfo, setUserInfo] = useState({ phone: '', password: '' });\n  const [otp, setOTP] = useState('');\n  // Stage can be 'credentials' (initial) or 'otp' (OTP sent & awaiting verification)\n  const [stage, setStage] = useState('credentials');\n  const [errorMessage, setErrorMessage] = useState(null);\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUserInfo(prev => ({ ...prev, [name]: value }));\n  };\n\n  // Step 1: Check credentials and, if valid, send the OTP automatically.\n  const handleSendOTP = async () => {\n    if (!userInfo.phone || !userInfo.password) {\n      alert(\"Please enter both phone number and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      if (!csrfToken) {\n        alert(\"CSRF Token missing. Refresh the page and try again.\");\n        return;\n      }\n      // First, verify credentials using the regular login endpoint.\n      const credResponse = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login/\",\n        {\n          username: userInfo.phone, // using phone as username\n          password: userInfo.password,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (!credResponse.data.success) {\n        alert(\"Incorrect phone number or password. Please try again.\");\n        return;\n      }\n      // Credentials are valid; now automatically send OTP.\n      const otpResponse = await sendOTP(userInfo.phone);\n      if (otpResponse.success) {\n        alert(\"✅ OTP sent successfully!\");\n        setStage('otp');\n      } else {\n        alert(\"❌ Failed to send OTP: \" + otpResponse.message);\n      }\n    } catch (error) {\n      console.error(\"Error during credentials check or sending OTP:\", error.response?.data || error);\n      alert(\"Error during credentials check or sending OTP.\");\n    }\n  };\n\n  // Step 2: Verify the OTP and complete login.\n  const handleOTPLogin = async () => {\n    if (!otp) {\n      alert(\"Please enter the OTP.\");\n      return;\n    }\n    try {\n      // Verify the OTP.\n      const verifyResponse = await verifyOTP(userInfo.phone, otp);\n      if (!verifyResponse.success) {\n        alert(\"Invalid OTP. Please try again.\");\n        return;\n      }\n      // OTP verified; complete login via the OTP-based endpoint.\n      const csrfToken = await getCSRFToken();\n      if (!csrfToken) {\n        alert(\"CSRF Token missing. Refresh the page and try again.\");\n        return;\n      }\n      const loginResponse = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login-otp/\",\n        {\n          phone: userInfo.phone,\n          password: userInfo.password,\n          otp: otp,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (loginResponse.data.success) {\n        const userData = {\n          name: loginResponse.data.user.name,\n          phone: loginResponse.data.user.phone_number,\n        };\n        localStorage.setItem(\"authToken\", loginResponse.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + loginResponse.data.message);\n      }\n    } catch (error) {\n      console.error(\"Error during OTP login:\", error.response?.data || error);\n      alert(\"Error during OTP login.\");\n    }\n  };\n\n  // Single button handler: in 'credentials' stage, check credentials and send OTP;\n  // in 'otp' stage, verify OTP and complete login.\n  const handleButtonClick = async () => {\n    if (stage === 'credentials') {\n      await handleSendOTP();\n    } else if (stage === 'otp') {\n      await handleOTPLogin();\n    }\n  };\n\n  const buttonText = stage === 'credentials' ? \"Send OTP\" : \"Login\";\n\n  return (\n    <div className=\"form-container\">\n      <h2>Login</h2>\n      {errorMessage && (\n        <div className=\"error-message\">\n          ❌ {errorMessage}\n        </div>\n      )}\n      <input \n        type=\"tel\" \n        name=\"phone\" \n        placeholder=\"Enter your phone number\" \n        value={userInfo.phone} \n        onChange={handleChange} \n        required \n      />\n      <input \n        type=\"password\" \n        name=\"password\" \n        placeholder=\"Enter your password\" \n        value={userInfo.password} \n        onChange={handleChange} \n        required \n      />\n      {stage === 'otp' && (\n        <input \n          type=\"text\" \n          placeholder=\"Enter OTP\" \n          value={otp} \n          onChange={(e) => setOTP(e.target.value)} \n          required \n        />\n      )}\n      <button onClick={handleButtonClick}>{buttonText}</button>\n      <button onClick={() => navigate('/signup')}>Signup</button>\n      <button onClick={() => navigate('/forgot-password')}>Forgot Password?</button>\n    </div>\n  );\n};\n\nexport default Login;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}