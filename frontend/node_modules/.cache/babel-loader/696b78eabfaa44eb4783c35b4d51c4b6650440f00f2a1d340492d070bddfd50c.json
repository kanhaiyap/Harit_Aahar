{"ast":null,"code":"import axios from 'axios';\n\n// Function to get CSRF token from cookies\nconst getCSRFToken = () => {\n  const name = 'csrftoken';\n  const value = document.cookie.match('(^|;)\\\\s*' + name + '=([^;]*)');\n  return value ? value.pop() : '';\n};\n\n// Function to send OTP via Twilio WhatsApp API\n// Function to send OTP\nexport const sendOTP = async phoneNumber => {\n  try {\n    const csrfToken = getCSRFToken(); // Retrieve CSRF token from cookies\n\n    const response = await axios.post('/api/auth/send_otp/', {\n      phone_number: phoneNumber\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrfToken // Include CSRF token in request headers\n      },\n      withCredentials: true // Ensure cookies are sent with the request\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\n// Function to verify OTP\nexport const verifyOTP = async (phoneNumber, otp) => {\n  try {\n    const response = await axios.post('/api/auth/verify_otp/', {\n      phone_number: phoneNumber,\n      otp\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getCSRFToken","name","value","document","cookie","match","pop","sendOTP","phoneNumber","csrfToken","response","post","phone_number","headers","withCredentials","data","error","console","message","verifyOTP","otp"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\n\n\n// Function to get CSRF token from cookies\nconst getCSRFToken = () => {\n    const name = 'csrftoken';\n    const value = document.cookie.match('(^|;)\\\\s*' + name + '=([^;]*)');\n    return value ? value.pop() : '';\n  };\n  \n// Function to send OTP via Twilio WhatsApp API\n// Function to send OTP\nexport const sendOTP = async (phoneNumber) => {\n    try {\n      const csrfToken = getCSRFToken();  // Retrieve CSRF token from cookies\n  \n      const response = await axios.post('/api/auth/send_otp/', \n        { phone_number: phoneNumber },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken  // Include CSRF token in request headers\n          },\n          withCredentials: true  // Ensure cookies are sent with the request\n        }\n      );\n  \n      return response.data;\n    } catch (error) {\n      console.error('Error sending OTP:', error.response ? error.response.data : error.message);\n      throw error;\n    }\n  };\n\n// Function to verify OTP\nexport const verifyOTP = async (phoneNumber, otp) => {\n  try {\n    const response = await axios.post('/api/auth/verify_otp/', { phone_number: phoneNumber, otp });\n    return response.data;\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAGzB;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB,MAAMC,IAAI,GAAG,WAAW;EACxB,MAAMC,KAAK,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,WAAW,GAAGJ,IAAI,GAAG,UAAU,CAAC;EACpE,OAAOC,KAAK,GAAGA,KAAK,CAACI,GAAG,CAAC,CAAC,GAAG,EAAE;AACjC,CAAC;;AAEH;AACA;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOC,WAAW,IAAK;EAC1C,IAAI;IACF,MAAMC,SAAS,GAAGT,YAAY,CAAC,CAAC,CAAC,CAAE;;IAEnC,MAAMU,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,qBAAqB,EACrD;MAAEC,YAAY,EAAEJ;IAAY,CAAC,EAC7B;MACEK,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,aAAa,EAAEJ,SAAS,CAAE;MAC5B,CAAC;MACDK,eAAe,EAAE,IAAI,CAAE;IACzB,CACF,CAAC;IAED,OAAOJ,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACN,QAAQ,GAAGM,KAAK,CAACN,QAAQ,CAACK,IAAI,GAAGC,KAAK,CAACE,OAAO,CAAC;IACzF,MAAMF,KAAK;EACb;AACF,CAAC;;AAEH;AACA,OAAO,MAAMG,SAAS,GAAG,MAAAA,CAAOX,WAAW,EAAEY,GAAG,KAAK;EACnD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,uBAAuB,EAAE;MAAEC,YAAY,EAAEJ,WAAW;MAAEY;IAAI,CAAC,CAAC;IAC9F,OAAOV,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}