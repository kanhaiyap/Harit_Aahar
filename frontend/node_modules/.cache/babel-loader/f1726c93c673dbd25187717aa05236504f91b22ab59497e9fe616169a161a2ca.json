{"ast":null,"code":"import axios from 'axios';\n\n// ✅ Export the function so it can be used elsewhere\nexport function getCsrfFromCookies() {\n  const cookies = document.cookie.split(\"; \");\n  for (const cookie of cookies) {\n    if (cookie.startsWith(\"csrftoken=\")) {\n      return cookie.split(\"=\")[1];\n    }\n  }\n  return \"\";\n}\n\n// ✅ Create Axios instance with proper settings\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:8000\",\n  // ✅ Ensure it's using `localhost`\n  withCredentials: true,\n  // ✅ Ensures cookies are included\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// ✅ Dynamically set CSRF token before each request\naxiosInstance.interceptors.request.use(config => {\n  const csrfToken = getCsrfFromCookies();\n  if (csrfToken) {\n    config.headers[\"X-CSRFToken\"] = csrfToken;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default axiosInstance;\n\n// ✅ Function to send OTP\nexport const sendOTP = async phoneNumber => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post('/api/auth/send-otp/', {\n      phone_number: phoneNumber\n    }, {\n      headers: {\n        'X-CSRFToken': csrfToken,\n        // Send CSRF Token in header\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true // Allow cookies for CSRF\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken(); // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n  try {\n    const response = await axios.post(\"http://127.0.0.1:8000/api/auth/verify-otp/\", {\n      phone_number: phoneNumber,\n      otp: otp\n    },\n    // ✅ Send phone_number in request\n    {\n      headers: {\n        \"X-CSRFToken\": csrfToken\n      },\n      withCredentials: true // ✅ Ensure cookies are sent\n    });\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"🔥 OTP Verification Failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async userInfo => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n    console.log('Sending signup request with:', userInfo); // Log data before request\n\n    const response = await axios.post('/api/auth/signup/', userInfo, {\n      headers: {\n        'X-CSRFToken': csrfToken\n      },\n      withCredentials: true\n    });\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error during signup:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n    throw error;\n  }\n};\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\nexport const isStaffUser = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/auth/profile/\", {\n      headers: {\n        Authorization: `Token ${getAuthToken()}`\n      }\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};","map":{"version":3,"names":["axios","getCsrfFromCookies","cookies","document","cookie","split","startsWith","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","csrfToken","error","Promise","reject","sendOTP","phoneNumber","getCSRFToken","response","post","phone_number","data","console","verifyOTP","otp","alert","log","_error$response","signupUser","userInfo","Error","_error$response2","getAuthToken","localStorage","getItem","isStaffUser","get","Authorization","is_staff"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\n\n\n\n// ✅ Export the function so it can be used elsewhere\nexport function getCsrfFromCookies() {\n  const cookies = document.cookie.split(\"; \");\n  for (const cookie of cookies) {\n    if (cookie.startsWith(\"csrftoken=\")) {\n      return cookie.split(\"=\")[1];\n    }\n  }\n  return \"\";\n}\n\n// ✅ Create Axios instance with proper settings\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:8000\",  // ✅ Ensure it's using `localhost`\n  withCredentials: true,  // ✅ Ensures cookies are included\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// ✅ Dynamically set CSRF token before each request\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const csrfToken = getCsrfFromCookies();\n    if (csrfToken) {\n      config.headers[\"X-CSRFToken\"] = csrfToken;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default axiosInstance;\n\n\n\n\n\n\n// ✅ Function to send OTP\nexport const sendOTP = async (phoneNumber) => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post(\n      '/api/auth/send-otp/',\n      { phone_number: phoneNumber },\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,  // Send CSRF Token in header\n          'Content-Type': 'application/json',\n        },\n        withCredentials: true,  // Allow cookies for CSRF\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\n\n\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken();  // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n\n  try {\n    const response = await axios.post(\n      \"http://127.0.0.1:8000/api/auth/verify-otp/\",\n      { phone_number: phoneNumber, otp: otp }, // ✅ Send phone_number in request\n      {\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        withCredentials: true, // ✅ Ensure cookies are sent\n      }\n    );\n\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"🔥 OTP Verification Failed:\", error.response?.data || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async (userInfo) => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n\n    console.log('Sending signup request with:', userInfo);  // Log data before request\n\n    const response = await axios.post(\n      '/api/auth/signup/',\n      userInfo,\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,\n        },\n        withCredentials: true,\n      }\n    );\n\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during signup:', error.response?.data || error);\n    throw error;\n  }\n};\n\n\n\n\nexport const getAuthToken = () => localStorage.getItem(\"authToken\");\n\nexport const isStaffUser = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/auth/profile/\", {\n      headers: { Authorization: `Token ${getAuthToken()}` },\n    });\n    return response.data.is_staff; // Ensure backend sends is_staff\n  } catch (error) {\n    return false;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}