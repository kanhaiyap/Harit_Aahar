{"ast":null,"code":"import axios from 'axios';\nconst getCSRFToken = () => {\n  const name = 'csrftoken';\n  const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n  if (match) return match[2];\n  return null;\n};\nexport const sendOTP = async phoneNumber => {\n  try {\n    const response = await axios.post('/api/auth/send_otp/', {\n      phone_number: phoneNumber\n    }, {\n      headers: {\n        'X-CSRFToken': getCSRFToken()\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error);\n    throw error;\n  }\n};\n\n// Function to verify OTP\nexport const verifyOTP = async (phoneNumber, otp) => {\n  try {\n    const response = await axios.post('/api/auth/verify_otp/', {\n      phone_number: phoneNumber,\n      otp\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getCSRFToken","name","match","document","cookie","RegExp","sendOTP","phoneNumber","response","post","phone_number","headers","data","error","console","verifyOTP","otp"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\n\nconst getCSRFToken = () => {\n  const name = 'csrftoken';\n  const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n  if (match) return match[2];\n  return null;\n};\n\nexport const sendOTP = async (phoneNumber) => {\n  try {\n    const response = await axios.post('/api/auth/send_otp/', \n      { phone_number: phoneNumber },\n      {\n        headers: {\n          'X-CSRFToken': getCSRFToken(),\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error);\n    throw error;\n  }\n};\n\n\n// Function to verify OTP\nexport const verifyOTP = async (phoneNumber, otp) => {\n  try {\n    const response = await axios.post('/api/auth/verify_otp/', { phone_number: phoneNumber, otp });\n    return response.data;\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,IAAI,GAAG,WAAW;EACxB,MAAMC,KAAK,GAAGC,QAAQ,CAACC,MAAM,CAACF,KAAK,CAAC,IAAIG,MAAM,CAAC,OAAO,GAAGJ,IAAI,GAAG,UAAU,CAAC,CAAC;EAC5E,IAAIC,KAAK,EAAE,OAAOA,KAAK,CAAC,CAAC,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMI,OAAO,GAAG,MAAOC,WAAW,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,qBAAqB,EACrD;MAAEC,YAAY,EAAEH;IAAY,CAAC,EAC7B;MACEI,OAAO,EAAE;QACP,aAAa,EAAEX,YAAY,CAAC;MAC9B;IACF,CACF,CAAC;IACD,OAAOQ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAOR,WAAW,EAAES,GAAG,KAAK;EACnD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,uBAAuB,EAAE;MAAEC,YAAY,EAAEH,WAAW;MAAES;IAAI,CAAC,CAAC;IAC9F,OAAOR,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}