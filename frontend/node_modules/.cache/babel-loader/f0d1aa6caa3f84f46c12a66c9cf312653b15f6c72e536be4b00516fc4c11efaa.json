{"ast":null,"code":"import axios from 'axios';\nexport const getCSRFToken = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/auth/csrf/\", {\n      withCredentials: true // ✅ Ensure cookies are sent\n    });\n    console.log(\"✅ CSRF Token Fetched:\", response.data.csrfToken);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error(\"🔥 Error fetching CSRF token:\", error);\n    return null;\n  }\n};\n\n// ✅ Function to send OTP\nexport const sendOTP = async phoneNumber => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post('/api/auth/send-otp/', {\n      phone_number: phoneNumber\n    }, {\n      headers: {\n        'X-CSRFToken': csrfToken,\n        // Send CSRF Token in header\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true // Allow cookies for CSRF\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken(); // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n  try {\n    const response = await axios.post(\"http://127.0.0.1:8000/api/auth/verify-otp/\", {\n      phone_number: phoneNumber,\n      otp: otp\n    },\n    // ✅ Send phone_number in request\n    {\n      headers: {\n        \"X-CSRFToken\": csrfToken\n      },\n      withCredentials: true // ✅ Ensure cookies are sent\n    });\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"🔥 OTP Verification Failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async userInfo => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n    console.log('Sending signup request with:', userInfo); // Log data before request\n\n    const response = await axios.post('/api/auth/signup/', userInfo, {\n      headers: {\n        'X-CSRFToken': csrfToken\n      },\n      withCredentials: true\n    });\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error during signup:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getCSRFToken","response","get","withCredentials","console","log","data","csrfToken","error","sendOTP","phoneNumber","post","phone_number","headers","verifyOTP","otp","alert","_error$response","signupUser","userInfo","Error","_error$response2"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/AuthUtils.js"],"sourcesContent":["import axios from 'axios';\nexport const getCSRFToken = async () => {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/auth/csrf/\", {\n      withCredentials: true, // ✅ Ensure cookies are sent\n    });\n    console.log(\"✅ CSRF Token Fetched:\", response.data.csrfToken);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error(\"🔥 Error fetching CSRF token:\", error);\n    return null;\n  }\n};\n\n\n// ✅ Function to send OTP\nexport const sendOTP = async (phoneNumber) => {\n  try {\n    const csrfToken = await getCSRFToken(); // Fetch CSRF Token before sending request\n\n    const response = await axios.post(\n      '/api/auth/send-otp/',\n      { phone_number: phoneNumber },\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,  // Send CSRF Token in header\n          'Content-Type': 'application/json',\n        },\n        withCredentials: true,  // Allow cookies for CSRF\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error('Error sending OTP:', error.response || error);\n    throw error;\n  }\n};\n\n\nexport const verifyOTP = async (phoneNumber, otp) => {\n  const csrfToken = await getCSRFToken();  // ✅ Ensure CSRF token is set\n  if (!csrfToken) {\n    alert(\"⚠️ CSRF Token missing! Try again.\");\n    return;\n  }\n\n  try {\n    const response = await axios.post(\n      \"http://127.0.0.1:8000/api/auth/verify-otp/\",\n      { phone_number: phoneNumber, otp: otp }, // ✅ Send phone_number in request\n      {\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        withCredentials: true, // ✅ Ensure cookies are sent\n      }\n    );\n\n    console.log(\"✅ OTP Verified Successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"🔥 OTP Verification Failed:\", error.response?.data || error);\n    alert(\"❌ OTP Verification Failed. Check console for details.\");\n    throw error;\n  }\n};\n\n// Signup Function\nexport const signupUser = async (userInfo) => {\n  try {\n    const csrfToken = await getCSRFToken();\n    if (!csrfToken) {\n      throw new Error('CSRF Token missing. Try reloading the page.');\n    }\n\n    console.log('Sending signup request with:', userInfo);  // Log data before request\n\n    const response = await axios.post(\n      '/api/auth/signup/',\n      userInfo,\n      {\n        headers: {\n          'X-CSRFToken': csrfToken,\n        },\n        withCredentials: true,\n      }\n    );\n\n    console.log('Signup API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during signup:', error.response?.data || error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}