{"ast":null,"code":"var _jsxFileName = \"/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getCSRFToken, sendOTP, verifyOTP } from \"../auth/AuthUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.withCredentials = true;\nconst Login = () => {\n  _s();\n  // We use \"phone\" here because the flow is phone-based.\n  const [userInfo, setUserInfo] = useState({\n    phone: \"\",\n    password: \"\"\n  });\n  const [otp, setOTP] = useState(\"\");\n  // otpStage can be \"none\", \"sent\", or \"verified\"\n  const [otpStage, setOtpStage] = useState(\"none\");\n  const navigate = useNavigate();\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserInfo(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Send OTP to the provided phone number\n  const handleSendOTP = async () => {\n    if (!userInfo.phone) {\n      alert(\"Please enter your phone number.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/send-otp/\", {\n        phone_number: userInfo.phone\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (response.data.success) {\n        alert(\"OTP sent successfully!\");\n        setOtpStage(\"sent\");\n      } else {\n        alert(\"Failed to send OTP: \" + response.data.message);\n      }\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error sending OTP:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      alert(\"Error sending OTP. Check console for details.\");\n    }\n  };\n\n  // Verify the OTP entered by the user\n  const handleVerifyOTP = async () => {\n    if (!otp) {\n      alert(\"Please enter the OTP.\");\n      return;\n    }\n    try {\n      const response = await verifyOTP(userInfo.phone, otp);\n      if (response.success) {\n        alert(\"OTP verified successfully!\");\n        setOtpStage(\"verified\");\n      } else {\n        alert(\"Invalid OTP.\");\n      }\n    } catch (error) {\n      console.error(\"Error verifying OTP:\", error);\n      alert(\"Error verifying OTP.\");\n    }\n  };\n\n  // Complete login after OTP verification\n  const handleLogin = async () => {\n    if (!userInfo.phone || !userInfo.password) {\n      alert(\"Please enter both phone number and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/login-otp/\", {\n        phone: userInfo.phone,\n        password: userInfo.password,\n        otp: otp\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (response.data.success) {\n        const userData = {\n          name: response.data.user.name,\n          phone: response.data.user.phone_number\n        };\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Login Error:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n      alert(\"Login failed. Check console for details.\");\n    }\n  };\n\n  // This handler drives the OTP flow:\n  // - If no OTP sent, it sends OTP.\n  // - If OTP sent but not verified, it verifies the OTP.\n  // - If OTP is verified, it logs in.\n  const handleButtonClick = async () => {\n    if (otpStage === \"none\") {\n      await handleSendOTP();\n    } else if (otpStage === \"sent\") {\n      await handleVerifyOTP();\n    } else if (otpStage === \"verified\") {\n      await handleLogin();\n    }\n  };\n  let buttonText = \"\";\n  if (otpStage === \"none\") {\n    buttonText = \"Send OTP\";\n  } else if (otpStage === \"sent\") {\n    buttonText = \"Verify OTP\";\n  } else if (otpStage === \"verified\") {\n    buttonText = \"Login\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"phone\",\n      placeholder: \"Enter your phone number\",\n      value: userInfo.phone,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"Enter your password\",\n      value: userInfo.password,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), otpStage !== \"none\" && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter OTP\",\n      value: otp,\n      onChange: e => setOTP(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/signup\"),\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/forgot-password\"),\n      children: \"Forgot Password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"zPvCScqCreSAZhtI0Uj+MYIwarI=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","useState","useNavigate","getCSRFToken","sendOTP","verifyOTP","jsxDEV","_jsxDEV","defaults","withCredentials","Login","_s","userInfo","setUserInfo","phone","password","otp","setOTP","otpStage","setOtpStage","navigate","handleChange","e","name","value","target","prev","handleSendOTP","alert","csrfToken","response","post","phone_number","headers","data","success","message","error","_error$response","console","handleVerifyOTP","handleLogin","userData","user","localStorage","setItem","authToken","JSON","stringify","window","dispatchEvent","Event","_error$response2","handleButtonClick","buttonText","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getCSRFToken, sendOTP, verifyOTP } from \"../auth/AuthUtils\";\naxios.defaults.withCredentials = true;\nconst Login = () => {\n  // We use \"phone\" here because the flow is phone-based.\n  const [userInfo, setUserInfo] = useState({ phone: \"\", password: \"\" });\n  const [otp, setOTP] = useState(\"\");\n  // otpStage can be \"none\", \"sent\", or \"verified\"\n  const [otpStage, setOtpStage] = useState(\"none\");\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUserInfo(prev => ({ ...prev, [name]: value }));\n  };\n\n  // Send OTP to the provided phone number\n  const handleSendOTP = async () => {\n    if (!userInfo.phone) {\n      alert(\"Please enter your phone number.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/send-otp/\",\n        { phone_number: userInfo.phone },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (response.data.success) {\n        alert(\"OTP sent successfully!\");\n        setOtpStage(\"sent\");\n      } else {\n        alert(\"Failed to send OTP: \" + response.data.message);\n      }\n    } catch (error) {\n      console.error(\"Error sending OTP:\", error.response?.data || error);\n      alert(\"Error sending OTP. Check console for details.\");\n    }\n  };\n\n  // Verify the OTP entered by the user\n  const handleVerifyOTP = async () => {\n    if (!otp) {\n      alert(\"Please enter the OTP.\");\n      return;\n    }\n    try {\n      const response = await verifyOTP(userInfo.phone, otp);\n      if (response.success) {\n        alert(\"OTP verified successfully!\");\n        setOtpStage(\"verified\");\n      } else {\n        alert(\"Invalid OTP.\");\n      }\n    } catch (error) {\n      console.error(\"Error verifying OTP:\", error);\n      alert(\"Error verifying OTP.\");\n    }\n  };\n\n  // Complete login after OTP verification\n  const handleLogin = async () => {\n    if (!userInfo.phone || !userInfo.password) {\n      alert(\"Please enter both phone number and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login-otp/\",\n        {\n          phone: userInfo.phone,\n          password: userInfo.password,\n          otp: otp,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (response.data.success) {\n        const userData = {\n          name: response.data.user.name,\n          phone: response.data.user.phone_number,\n        };\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      console.error(\"Login Error:\", error.response?.data || error);\n      alert(\"Login failed. Check console for details.\");\n    }\n  };\n\n  // This handler drives the OTP flow:\n  // - If no OTP sent, it sends OTP.\n  // - If OTP sent but not verified, it verifies the OTP.\n  // - If OTP is verified, it logs in.\n  const handleButtonClick = async () => {\n    if (otpStage === \"none\") {\n      await handleSendOTP();\n    } else if (otpStage === \"sent\") {\n      await handleVerifyOTP();\n    } else if (otpStage === \"verified\") {\n      await handleLogin();\n    }\n  };\n\n  let buttonText = \"\";\n  if (otpStage === \"none\") {\n    buttonText = \"Send OTP\";\n  } else if (otpStage === \"sent\") {\n    buttonText = \"Verify OTP\";\n  } else if (otpStage === \"verified\") {\n    buttonText = \"Login\";\n  }\n\n  return (\n    <div>\n      <h2>Login</h2>\n      <input\n        type=\"text\"\n        name=\"phone\"\n        placeholder=\"Enter your phone number\"\n        value={userInfo.phone}\n        onChange={handleChange}\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Enter your password\"\n        value={userInfo.password}\n        onChange={handleChange}\n      />\n      {/* Only show the OTP input if we've already sent an OTP */}\n      {otpStage !== \"none\" && (\n        <input\n          type=\"text\"\n          placeholder=\"Enter OTP\"\n          value={otp}\n          onChange={(e) => setOTP(e.target.value)}\n        />\n      )}\n      <button onClick={handleButtonClick}>{buttonText}</button>\n      <button onClick={() => navigate(\"/signup\")}>Signup</button>\n      <button onClick={() => navigate(\"/forgot-password\")}>\n        Forgot Password?\n      </button>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}