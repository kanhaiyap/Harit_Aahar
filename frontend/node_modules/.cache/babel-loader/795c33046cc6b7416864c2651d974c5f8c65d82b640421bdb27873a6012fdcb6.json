{"ast":null,"code":"import axios from \"axios\";\n\n// ✅ Export the function so it can be used elsewhere\nexport function getCsrfFromCookies() {\n  const cookies = document.cookie.split(\"; \");\n  for (const cookie of cookies) {\n    if (cookie.startsWith(\"csrftoken=\")) {\n      return cookie.split(\"=\")[1];\n    }\n  }\n  return \"\";\n}\n\n// ✅ Create Axios instance with proper settings\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:8000\",\n  // ✅ Ensure it's using `localhost`\n  withCredentials: true,\n  // ✅ Ensures cookies are included\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// ✅ Dynamically set CSRF token before each request\naxiosInstance.interceptors.request.use(config => {\n  const csrfToken = getCsrfFromCookies();\n  if (csrfToken) {\n    config.headers[\"X-CSRFToken\"] = csrfToken;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default axiosInstance;","map":{"version":3,"names":["axios","getCsrfFromCookies","cookies","document","cookie","split","startsWith","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","csrfToken","error","Promise","reject"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/CSRFToken.js"],"sourcesContent":["import axios from \"axios\";\n\n// ✅ Export the function so it can be used elsewhere\nexport function getCsrfFromCookies() {\n  const cookies = document.cookie.split(\"; \");\n  for (const cookie of cookies) {\n    if (cookie.startsWith(\"csrftoken=\")) {\n      return cookie.split(\"=\")[1];\n    }\n  }\n  return \"\";\n}\n\n// ✅ Create Axios instance with proper settings\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:8000\",  // ✅ Ensure it's using `localhost`\n  withCredentials: true,  // ✅ Ensures cookies are included\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// ✅ Dynamically set CSRF token before each request\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const csrfToken = getCsrfFromCookies();\n    if (csrfToken) {\n      config.headers[\"X-CSRFToken\"] = csrfToken;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,SAASC,kBAAkBA,CAAA,EAAG;EACnC,MAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;EAC3C,KAAK,MAAMD,MAAM,IAAIF,OAAO,EAAE;IAC5B,IAAIE,MAAM,CAACE,UAAU,CAAC,YAAY,CAAC,EAAE;MACnC,OAAOF,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7B;EACF;EACA,OAAO,EAAE;AACX;;AAEA;AACA,MAAME,aAAa,GAAGP,KAAK,CAACQ,MAAM,CAAC;EACjCC,OAAO,EAAE,uBAAuB;EAAG;EACnCC,eAAe,EAAE,IAAI;EAAG;EACxBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,SAAS,GAAGf,kBAAkB,CAAC,CAAC;EACtC,IAAIe,SAAS,EAAE;IACbD,MAAM,CAACJ,OAAO,CAAC,aAAa,CAAC,GAAGK,SAAS;EAC3C;EACA,OAAOD,MAAM;AACf,CAAC,EACAE,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,eAAeV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}