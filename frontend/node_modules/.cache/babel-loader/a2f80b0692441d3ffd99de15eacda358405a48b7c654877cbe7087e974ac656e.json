{"ast":null,"code":"var _jsxFileName = \"/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getCSRFToken, sendOTP, verifyOTP } from \"../auth/AuthUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [userInfo, setUserInfo] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [otp, setOTP] = useState(\"\");\n  const [otpSent, setOtpSent] = useState(false);\n  const [verified, setVerified] = useState(false);\n  const navigate = useNavigate();\n\n  // If the identifier is only digits, treat it as a phone number\n  const isPhoneLogin = /^\\d+$/.test(userInfo.email);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserInfo({\n      ...userInfo,\n      [name]: value\n    });\n  };\n\n  // Email login flow\n  const handleEmailLogin = async () => {\n    if (!userInfo.email || !userInfo.password) {\n      alert(\"❌ Please enter both email and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      if (!csrfToken) {\n        alert(\"❌ CSRF Token missing. Refresh the page and try again.\");\n        return;\n      }\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/login/\", {\n        username: userInfo.email,\n        password: userInfo.password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (response.data.success) {\n        const userData = {\n          name: response.data.user.name,\n          email: response.data.user.email,\n          phone_number: response.data.user.phone_number\n        };\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      var _error$response;\n      console.error(\"🔥 Login Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      alert(\"❌ Login failed. Check console for details.\");\n    }\n  };\n\n  // OTP flow functions for phone login\n  const handleSendOTP = async () => {\n    if (!userInfo.email) {\n      alert(\"❌ Please enter your phone number.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/send-otp/\", {\n        phone_number: userInfo.email\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (response.data.success) {\n        alert(\"✅ OTP sent successfully!\");\n        setOtpSent(true);\n      } else {\n        alert(\"❌ Failed to send OTP: \" + response.data.message);\n      }\n    } catch (error) {\n      var _error$response2;\n      console.error(\"🔥 Error sending OTP:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n      alert(\"❌ Error sending OTP. Check console for details.\");\n    }\n  };\n  const handleVerifyOTP = async () => {\n    if (!otp) {\n      alert(\"❌ Please enter the OTP.\");\n      return;\n    }\n    try {\n      const response = await verifyOTP(userInfo.email, otp);\n      if (response.success) {\n        alert(\"✅ OTP verified successfully!\");\n        setVerified(true);\n      } else {\n        alert(\"❌ Invalid OTP.\");\n      }\n    } catch (error) {\n      console.error(\"🔥 Error verifying OTP:\", error);\n      alert(\"❌ Error verifying OTP.\");\n    }\n  };\n\n  // Complete phone login after OTP verification\n  const handlePhoneLogin = async () => {\n    if (!userInfo.email || !userInfo.password) {\n      alert(\"❌ Please enter both phone number and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/login-otp/\", {\n        phone: userInfo.email,\n        password: userInfo.password,\n        otp: otp\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-CSRFToken\": csrfToken\n        },\n        withCredentials: true\n      });\n      if (response.data.success) {\n        const userData = {\n          name: response.data.user.name,\n          email: response.data.user.email,\n          phone_number: response.data.user.phone_number\n        };\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      var _error$response3;\n      console.error(\"🔥 Phone Login Error:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n      alert(\"❌ Login failed. Check console for details.\");\n    }\n  };\n\n  // This button handler drives the OTP flow for phone login:\n  // - If OTP not yet sent, it sends OTP.\n  // - If OTP sent but not verified, it verifies OTP.\n  // - If OTP is verified, it completes the login.\n  const handleButtonClick = async () => {\n    if (isPhoneLogin) {\n      if (!otpSent) {\n        await handleSendOTP();\n      } else if (!verified) {\n        await handleVerifyOTP();\n      } else {\n        await handlePhoneLogin();\n      }\n    } else {\n      // Email login flow\n      await handleEmailLogin();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      placeholder: \"Phone (for OTP) or Email\",\n      value: userInfo.email,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"Password\",\n      value: userInfo.password,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), isPhoneLogin && otpSent && !verified && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter OTP\",\n      value: otp,\n      onChange: e => setOTP(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: isPhoneLogin ? !otpSent ? \"Send OTP\" : !verified ? \"Verify OTP\" : \"Login\" : \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/signup\"),\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/forgot-password\"),\n      children: \"Forgot Password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"bJyLMHZrCFkziL27dp07aK18SBU=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","useState","useNavigate","getCSRFToken","sendOTP","verifyOTP","jsxDEV","_jsxDEV","Login","_s","userInfo","setUserInfo","email","password","otp","setOTP","otpSent","setOtpSent","verified","setVerified","navigate","isPhoneLogin","test","handleChange","e","name","value","target","handleEmailLogin","alert","csrfToken","response","post","username","headers","withCredentials","data","success","userData","user","phone_number","localStorage","setItem","authToken","JSON","stringify","window","dispatchEvent","Event","message","error","_error$response","console","handleSendOTP","_error$response2","handleVerifyOTP","handlePhoneLogin","phone","_error$response3","handleButtonClick","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/kunwarkanhaiyakamlakantpandey/Downloads/project of harit kranti/harit_aahar1/frontend/src/auth/Login.js"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getCSRFToken, sendOTP, verifyOTP } from \"../auth/AuthUtils\";\n\nconst Login = () => {\n  const [userInfo, setUserInfo] = useState({ email: \"\", password: \"\" });\n  const [otp, setOTP] = useState(\"\");\n  const [otpSent, setOtpSent] = useState(false);\n  const [verified, setVerified] = useState(false);\n  const navigate = useNavigate();\n\n  // If the identifier is only digits, treat it as a phone number\n  const isPhoneLogin = /^\\d+$/.test(userInfo.email);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUserInfo({ ...userInfo, [name]: value });\n  };\n\n  // Email login flow\n  const handleEmailLogin = async () => {\n    if (!userInfo.email || !userInfo.password) {\n      alert(\"❌ Please enter both email and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      if (!csrfToken) {\n        alert(\"❌ CSRF Token missing. Refresh the page and try again.\");\n        return;\n      }\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login/\",\n        {\n          username: userInfo.email,\n          password: userInfo.password,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (response.data.success) {\n        const userData = {\n          name: response.data.user.name,\n          email: response.data.user.email,\n          phone_number: response.data.user.phone_number,\n        };\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      console.error(\"🔥 Login Error:\", error.response?.data || error);\n      alert(\"❌ Login failed. Check console for details.\");\n    }\n  };\n\n  // OTP flow functions for phone login\n  const handleSendOTP = async () => {\n    if (!userInfo.email) {\n      alert(\"❌ Please enter your phone number.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/send-otp/\",\n        { phone_number: userInfo.email },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (response.data.success) {\n        alert(\"✅ OTP sent successfully!\");\n        setOtpSent(true);\n      } else {\n        alert(\"❌ Failed to send OTP: \" + response.data.message);\n      }\n    } catch (error) {\n      console.error(\"🔥 Error sending OTP:\", error.response?.data || error);\n      alert(\"❌ Error sending OTP. Check console for details.\");\n    }\n  };\n\n  const handleVerifyOTP = async () => {\n    if (!otp) {\n      alert(\"❌ Please enter the OTP.\");\n      return;\n    }\n    try {\n      const response = await verifyOTP(userInfo.email, otp);\n      if (response.success) {\n        alert(\"✅ OTP verified successfully!\");\n        setVerified(true);\n      } else {\n        alert(\"❌ Invalid OTP.\");\n      }\n    } catch (error) {\n      console.error(\"🔥 Error verifying OTP:\", error);\n      alert(\"❌ Error verifying OTP.\");\n    }\n  };\n\n  // Complete phone login after OTP verification\n  const handlePhoneLogin = async () => {\n    if (!userInfo.email || !userInfo.password) {\n      alert(\"❌ Please enter both phone number and password.\");\n      return;\n    }\n    try {\n      const csrfToken = await getCSRFToken();\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/auth/login-otp/\",\n        {\n          phone: userInfo.email,\n          password: userInfo.password,\n          otp: otp,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"X-CSRFToken\": csrfToken,\n          },\n          withCredentials: true,\n        }\n      );\n      if (response.data.success) {\n        const userData = {\n          name: response.data.user.name,\n          email: response.data.user.email,\n          phone_number: response.data.user.phone_number,\n        };\n        localStorage.setItem(\"authToken\", response.data.authToken);\n        localStorage.setItem(\"user\", JSON.stringify(userData));\n        window.dispatchEvent(new Event(\"storage\"));\n        alert(\"✅ Login successful!\");\n        navigate(\"/profile\");\n      } else {\n        alert(\"❌ Login failed: \" + response.data.message);\n      }\n    } catch (error) {\n      console.error(\"🔥 Phone Login Error:\", error.response?.data || error);\n      alert(\"❌ Login failed. Check console for details.\");\n    }\n  };\n\n  // This button handler drives the OTP flow for phone login:\n  // - If OTP not yet sent, it sends OTP.\n  // - If OTP sent but not verified, it verifies OTP.\n  // - If OTP is verified, it completes the login.\n  const handleButtonClick = async () => {\n    if (isPhoneLogin) {\n      if (!otpSent) {\n        await handleSendOTP();\n      } else if (!verified) {\n        await handleVerifyOTP();\n      } else {\n        await handlePhoneLogin();\n      }\n    } else {\n      // Email login flow\n      await handleEmailLogin();\n    }\n  };\n\n  return (\n    <div>\n      <h2>Login</h2>\n      <input\n        type=\"text\"\n        name=\"email\"\n        placeholder=\"Phone (for OTP) or Email\"\n        value={userInfo.email}\n        onChange={handleChange}\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Password\"\n        value={userInfo.password}\n        onChange={handleChange}\n      />\n      {isPhoneLogin && otpSent && !verified && (\n        <input\n          type=\"text\"\n          placeholder=\"Enter OTP\"\n          value={otp}\n          onChange={(e) => setOTP(e.target.value)}\n        />\n      )}\n      <button onClick={handleButtonClick}>\n        {isPhoneLogin\n          ? !otpSent\n            ? \"Send OTP\"\n            : !verified\n            ? \"Verify OTP\"\n            : \"Login\"\n          : \"Login\"}\n      </button>\n      <button onClick={() => navigate(\"/signup\")}>Signup</button>\n      <button onClick={() => navigate(\"/forgot-password\")}>\n        Forgot Password?\n      </button>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}